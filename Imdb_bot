from kivy.app import App
from kivy.uix.widget import Widget
from kivy.properties import ObjectProperty, NumericProperty, StringProperty
import tensorflow as tf
import tensorflow_datasets as tfds
import tensorflow_hub as hub
from numpy import loadtxt
from keras.models import Sequential
from keras.layers import Dense
from tensorflow import keras
import numpy as np




class CustomWidget(Widget):
    
    i = 0
    i = i + 1
    last_name_text_input = ObjectProperty()
    movie_genre_text_input = ObjectProperty()
    ego = NumericProperty(0)    
    command = StringProperty('')  
    movie_comm = StringProperty('')
    genres = ['action','adventure','animation','biography','comedy','crime','drama','family','fantasy','film_noir','history','horror','music','musical','mystery','romance','sci_fi','sport','thriller','war','western'] 
    
    if i == 1:
        avr_action = 0
        avr_adventure = 0
        avr_animation = 0
        avr_biography = 0
        avr_comedy = 0
        avr_crime = 0
        avr_drama = 0
        avr_family = 0
        avr_fantasy = 0
        avr_film_noir = 0
        avr_history = 0
        avr_horror = 0
        avr_music = 0
        avr_musical = 0
        avr_mystery = 0
        avr_romance = 0
        avr_action = 0
        avr_sci_fi= 0
        avr_sport = 0
        avr_thriller = 0
        avr_war = 0
        avr_western = 0
        num_action = 0
        num_adventure = 0
        num_animation = 0
        num_biography = 0
        num_comedy = 0
        num_crime = 0
        num_drama = 0
        num_family = 0
        num_fantasy = 0
        num_film_nior = 0
        num_history = 0
        num_horror = 0
        num_music = 0
        num_musical = 0
        num_mystery = 0
        num_romance = 0
        num_sci_fi = 0
        num_sport = 0
        num_thriller = 0
        num_war = 0
        num_western = 0
    
    
    movie_avr = "avr_{index}"
    movie_num = "num_{index}"
    for i in genres:
        print(movie_avr.format(index=i))

    for i in genres:
        print(movie_num.format(index=i))    
    




    
    train_ds, test_ds = tfds.load('imdb_reviews', split=['train', 'test'],as_supervised=True)
    train_examples_batch, train_label_batch = next(iter(train_ds.batch(10)))
    pretrained_model = "https://tfhub.dev/google/tf2-preview/gnews-swivel-20dim/1"
    hub_layer = hub.KerasLayer(pretrained_model, input_shape=[], dtype=tf.string, trainable=True)
    model = tf.keras.Sequential()
    model.add(hub_layer)
    model.add(tf.keras.layers.Dense(16,activation="relu"))
    model.add(tf.keras.layers.Dense(1,activation="sigmoid"))
    model.compile(optimizer='adam',
               loss='binary_crossentropy',
               metrics=['accuracy'])
    model.fit(train_ds.shuffle(10000).batch(512),
         epochs=20,
         validation_data=test_ds.batch(512),
         verbose=1) 
    
    def submit_command(self):
            self.command = self.last_name_text_input.text
            self.movie_comm = self.movie_genre_text_input.text
            """
            print("Assign command: {}".format(self.surname))
            self.save()
            self.surname = ''
            print("Reset command: {}".format(self.surname)
            self.load()
            print("Loaded command: {}".format(self.surname)
            """
            folder = open('command_list.txt','a')
            folder.write(str(self.command))
            folder.write('\n')
            folder= open('command_list.txt', 'r')
           
            print("Prediction value")
            print(self.model.predict([str(self.command)]))
            
            if 'action'in str(self.movie_comm):
                print("**************")
                self.num_action=self.num_action + 1
                self.avr_action = self.avr_action + self.model.predict([str(self.command)])
                print("Number of commands:")
                print(self.num_action)
                print("Sum of commands")

                print(self.avr_action)

            elif 'adventure'in str(self.movie_comm):
                print("**************")
                self.num_adventure=self.num_adventure + 1
                self.avr_adventure = self.avr_adventure + self.model.predict([str(self.command)])
            elif 'animation'in str(self.movie_comm):
                print("**************")
                self.num_animation=self.num_aanimation + 1
                self.avr_animation = self.avr_animation + self.model.predict([str(self.command)])
            elif 'biography'in str(self.movie_comm):
                print("**************")
                self.num_biography=self.num_biography + 1
                self.avr_biography = self.avr_biography + self.model.predict([str(self.command)]) 
            elif 'comedy'in str(self.movie_comm):
                print("**************")
                self.num_comedy=self.num_comedy + 1
                self.avr_comedy = self.avr_comedy + self.model.predict([str(self.command)])
            elif 'crime'in str(self.movie_comm):
                print("**************")
                self.num_crime=self.num_crime + 1
                self.avr_crime = self.avr_crime + self.model.predict([str(self.command)])
            elif 'drama'in str(self.movie_comm):
                print("**************")
                self.num_drama=self.num_drama + 1
                self.avr_drama = self.avr_drama+ self.model.predict([str(self.command)])    
            elif 'family'in str(self.movie_comm):
                print("**************")
                self.num_family=self.num_family + 1
                self.avr_family = self.avr_family + self.model.predict([str(self.command)])
            elif 'fantasy'in str(self.movie_comm):
                print("**************")
                self.num_fantasy=self.num_fantasy + 1
                self.avr_fantasy = self.avr_fantasy + self.model.predict([str(self.command)])
            elif 'film_noir'in str(self.movie_comm):
                print("**************")
                self.num_film_noir=self.num_film_noir + 1
                self.avr_film_noir = self.avr_film_noir + self.model.predict([str(self.command)])
            elif 'history'in str(self.movie_comm):
                print("**************")
                self.num_history=self.num_history+ 1
                self.avr_history= self.avr_history + self.model.predict([str(self.command)])  
            elif 'music'in str(self.movie_comm):
                print("**************")
                self.num_music=self.num_music + 1
                self.avr_music = self.avr_music+ self.model.predict([str(self.command)]) 
            elif 'musical'in str(self.movie_comm):
                print("**************")
                self.num_musical=self.num_musical + 1
                self.avr_musical = self.avr_musical + self.model.predict([str(self.command)])
            elif 'mystery'in str(self.movie_comm):
                print("**************")
                self.num_mystery=self.num_mystery + 1
                self.avr_mystery = self.avr_mystery+ self.model.predict([str(self.command)])
            elif 'romance'in str(self.movie_comm):
                print("**************")
                self.num_romance=self.num_romance + 1
                self.avr_romance = self.avr_romance + self.model.predict([str(self.command)])
            elif 'sci_fi'in str(self.movie_comm):
                print("**************")
                self.num_sci_fi=self.num_sci_fi + 1
                self.avr_sci_fi = self.avr_sci_fi + self.model.predict([str(self.command)])
            elif 'sport'in str(self.movie_comm):
                print("**************")
                self.num_sport=self.num_sport + 1
                self.avr_sport= self.avr_sport + self.model.predict([str(self.command)])
            elif 'thriller'in str(self.movie_comm):
                print("**************")
                self.num_thriller=self.num_thriller + 1
                self.avr_thriller = self.avr_thriller + self.model.predict([str(self.command)])
            elif 'war'in str(self.movie_comm):
                print("**************")
                self.num_war=self.num_war + 1
                self.avr_war = self.avr_war + self.model.predict([str(self.command)])
            elif 'western'in str(self.movie_comm):
                print("**************")
                self.num_western=self.num_western + 1
                self.avr_western = self.avr_western + self.model.predict([str(self.command)])
            
            
            

    
    def bot(self):
        try:
                self.avr_action = self.avr_action/self.num_action
            
                self.avr_adventure = self.avr_adventure/self.num_adventure
                self.avr_animation = self.avr_animation/self.num_animation
                self.avr_comedy = self.avr_comedy/self.num_comedy
                self.avr_biography = self.avr_comedy/self.num_comedy
                self.avr_crime = self.avr_crime/self.num_crime
                self.avr_drama = self.avr_drama/self.num_drama
                self.avr_family = self.avr_family/self.num_family
                self.avr_fantasy = self.avr_fantasy/self.num_fantasy
                self.avr_film_noir = self.avr_film_noir/self.num_film_nior
                self.avr_history = self.avr_history/self.num_history
                self.avr_horror = self.avr_horror/self.num_horror
                self.avr_music = self.avr_music/self.num_music
                self.avr_musical = self.avr_musical/self.num_musical
                self.avr_mystery = self.avr_mystery/self.num_mystery
                self.avr_romance = self.avr_romance/self.num_romance
                self.avr_sci_fi = self.avr_sci_fi/self.num_sci_fi
                self.avr_sport = self.avr_sport/self.num_sport
                self.avr_thriller = self.avr_thriller/self.num_thriller
                self.avr_war = self.avr_war/self.num_war
                self.avr_western = self.avr_western/self.num_western
        except(ZeroDivisionError):
            pass
            
        avr_genres = [self.avr_action,self.avr_adventure,self.avr_animation,self.avr_biography,self.avr_crime,self.avr_drama,self.avr_family, self.avr_fantasy, self.avr_film_noir,self.avr_history,self.avr_horror,self.avr_music, self.avr_musical,self.avr_mystery,self.avr_romance,self.avr_comedy,self.avr_sci_fi,self.avr_sport,self.avr_thriller,self.avr_war,self.avr_western,]
            
            
           
        avr_genres.sort(reverse=True)
        print("Highest average")
        print(avr_genres[0])
        print("00000000000000")
        
      
    
    
    def save(self):
            with open("surname.txt", "w") as fobj:
                fobj.write(str(self.surname))

    def load(self):
            with open("surname.txt") as fobj:
                for surname in fobj:
                    self.surname = surname.rstrip()
