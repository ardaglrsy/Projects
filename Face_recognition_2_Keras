from tensorflow import keras
import tensorflow as tf
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.models import load_model
from keras_vggface.utils import preprocess_input
from keras_vggface.vggface import VGGFace
from scipy.spatial.distance import cosine
from keras_applications.imagenet_utils import _obtain_input_shape 
import cv2
import numpy
from mtcnn.mtcnn import MTCNN

from matplotlib import pyplot as plt
from PIL import Image
def extract(image):
      
      
  face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

  img = cv2.imread(image)

  gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

  faces = face_cascade.detectMultiScale(gray, 1.1, 4)

  for (x, y, w, h) in faces:
    cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 2)
    roi_color = img[y:y + h, x:x + w] 
    dsize = (224,224)
    img_resized = cv2.resize(img,dsize)
    print(img_resized.shape)
    print("[INFO] Object found. Saving locally.") 
    cv2.imwrite(str(h) + str(w) + '_faces.jpg', roi_color)
    img_resized = cv2.imread(str(h) + str(w) + '_faces.jpg')
    img_resized_final = cv2.resize(img_resized,dsize)

  cv2.imshow('img_resized', img_resized_final)
  cv2.waitKey()
  return img_resized_final
  




def get_model_scores(faces):
    samples = numpy.asarray(faces, 'float32')

    # prepare the data for the model
    samples = preprocess_input(samples, version=2)

    # create a vggface model object
    model = VGGFace(model='resnet50',
      include_top=False,
      input_shape=(224, 224, 3),
      pooling='avg')

    # perform prediction
    return model.predict(samples)


faces = [extract('Elon_Musk.jpg'), extract('Elon_Musk(2).jpg')]

model_scores = get_model_scores(faces)
if cosine(model_scores[0], model_scores[1]) <= 0.4:
  print("Faces Matched")
