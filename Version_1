import pyttsx3
import speech_recognition as sr
import datetime
import wikipedia
import os 
import smtplib
from selenium import webdriver
import time
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver import Chrome
from selenium.webdriver.chrome.options import Options
import serial

"""opts = Options()
opts.set_headless()
assert opts.headless
path = "C:/Users/game/Desktop/chromedriver.exe"
browser = webdriver.Chrome(path)"""

engine = pyttsx3.init("sapi5")
voices = engine.getProperty('voices')
engine.setProperty('voice', voices[0].id)
ser = serial.Serial('COM3',baudrate = 9600, timeout=1)

def speak(text):
    engine.say(text)
    engine.runAndWait()
def clock():
    hour = str(datetime.datetime.now().hour)
    minute = str(datetime.datetime.now().minute)
    print(hour +"."+ minute) 
    speak(hour+"."+minute)
def youtube(vid):

    
    opts = Options()
    opts.set_headless()
    assert opts.headless
    path = "C:/Users/game/Desktop/chromedriver.exe"
    browser = webdriver.Chrome(path)
    browser.get("https://www.youtube.com/")
    time.sleep(5)
    search_form = browser.find_element_by_name('search_query')
    search_form.send_keys(vid)
    search_form.submit()
    browser.maximize_window()
    video_form = browser.find_element_by_class_name("style-scope ytd-video-renderer")
    video_form.click()
def main():
    command = input("Waiting for command ...")

    if "time" in command.lower():
        clock()
        
    

    elif "youtube" in command.lower():
     #browser.get("https://www.youtube.com/")
       print("Youtube is opened")
       speak("Youtube is opened")
       speak("Youtube video")
     

       youtube_command = input("Youtube video:")
       youtube_command = youtube_command.replace("search", "")
       youtube(youtube_command)
    
 
try:
  ser = serial.Serial( 'com10', 9600, timeout=1)


  ser.isOpen() # try to open port, if possible print message and proceed with 'while True:'
  print ("port is opened!")

except IOError: # if port is already opened, close it and open it again and print message
  ser.close()
  ser.open()
  print ("port was already open, was closed and opened again!")

  

speak("Initilazing AI ...")
print("Initilazing AI")
while (True):
  main()
